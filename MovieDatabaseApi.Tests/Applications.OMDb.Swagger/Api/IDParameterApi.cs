/*
 * OMDb API
 *
 * This API requires authorization, you can get a free key here: [http://omdbapi.com/apikey.aspx](http://omdbapi.com/apikey.aspx)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: bfritz@fadingsignal.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Applications.OMDb.Swagger.Client;

namespace Applications.OMDb.Swagger.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIDParameterApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Returns a single result based on the ID provided
        /// </summary>
        /// <exception cref="Applications.OMDb.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="i">A valid IMDb ID (e.g. tt0000001)</param>
        /// <param name="plot">Return short or full plot (optional)</param>
        /// <param name="r">The response type to return (optional)</param>
        /// <param name="callback">JSONP callback name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void GetId(string i, string plot = default(string), string r = default(string), string callback = default(string), int operationIndex = 0);

        /// <summary>
        /// Returns a single result based on the ID provided
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Applications.OMDb.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="i">A valid IMDb ID (e.g. tt0000001)</param>
        /// <param name="plot">Return short or full plot (optional)</param>
        /// <param name="r">The response type to return (optional)</param>
        /// <param name="callback">JSONP callback name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetIdWithHttpInfo(string i, string plot = default(string), string r = default(string), string callback = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIDParameterApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Returns a single result based on the ID provided
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Applications.OMDb.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="i">A valid IMDb ID (e.g. tt0000001)</param>
        /// <param name="plot">Return short or full plot (optional)</param>
        /// <param name="r">The response type to return (optional)</param>
        /// <param name="callback">JSONP callback name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetIdAsync(string i, string plot = default(string), string r = default(string), string callback = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns a single result based on the ID provided
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Applications.OMDb.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="i">A valid IMDb ID (e.g. tt0000001)</param>
        /// <param name="plot">Return short or full plot (optional)</param>
        /// <param name="r">The response type to return (optional)</param>
        /// <param name="callback">JSONP callback name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetIdWithHttpInfoAsync(string i, string plot = default(string), string r = default(string), string callback = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIDParameterApi : IIDParameterApiSync, IIDParameterApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IDParameterApi : IIDParameterApi
    {
        private Applications.OMDb.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IDParameterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IDParameterApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IDParameterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IDParameterApi(string basePath)
        {
            this.Configuration = Applications.OMDb.Swagger.Client.Configuration.MergeConfigurations(
                Applications.OMDb.Swagger.Client.GlobalConfiguration.Instance,
                new Applications.OMDb.Swagger.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Applications.OMDb.Swagger.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Applications.OMDb.Swagger.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Applications.OMDb.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IDParameterApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IDParameterApi(Applications.OMDb.Swagger.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Applications.OMDb.Swagger.Client.Configuration.MergeConfigurations(
                Applications.OMDb.Swagger.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Applications.OMDb.Swagger.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Applications.OMDb.Swagger.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Applications.OMDb.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IDParameterApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IDParameterApi(Applications.OMDb.Swagger.Client.ISynchronousClient client, Applications.OMDb.Swagger.Client.IAsynchronousClient asyncClient, Applications.OMDb.Swagger.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Applications.OMDb.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Applications.OMDb.Swagger.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Applications.OMDb.Swagger.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Applications.OMDb.Swagger.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Applications.OMDb.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Returns a single result based on the ID provided 
        /// </summary>
        /// <exception cref="Applications.OMDb.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="i">A valid IMDb ID (e.g. tt0000001)</param>
        /// <param name="plot">Return short or full plot (optional)</param>
        /// <param name="r">The response type to return (optional)</param>
        /// <param name="callback">JSONP callback name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void GetId(string i, string plot = default(string), string r = default(string), string callback = default(string), int operationIndex = 0)
        {
            GetIdWithHttpInfo(i, plot, r, callback);
        }

        /// <summary>
        /// Returns a single result based on the ID provided 
        /// </summary>
        /// <exception cref="Applications.OMDb.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="i">A valid IMDb ID (e.g. tt0000001)</param>
        /// <param name="plot">Return short or full plot (optional)</param>
        /// <param name="r">The response type to return (optional)</param>
        /// <param name="callback">JSONP callback name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Applications.OMDb.Swagger.Client.ApiResponse<Object> GetIdWithHttpInfo(string i, string plot = default(string), string r = default(string), string callback = default(string), int operationIndex = 0)
        {
            // verify the required parameter 'i' is set
            if (i == null)
            {
                throw new Applications.OMDb.Swagger.Client.ApiException(400, "Missing required parameter 'i' when calling IDParameterApi->GetId");
            }

            Applications.OMDb.Swagger.Client.RequestOptions localVarRequestOptions = new Applications.OMDb.Swagger.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Applications.OMDb.Swagger.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Applications.OMDb.Swagger.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Applications.OMDb.Swagger.Client.ClientUtils.ParameterToMultiMap("", "i", i));
            if (plot != null)
            {
                localVarRequestOptions.QueryParameters.Add(Applications.OMDb.Swagger.Client.ClientUtils.ParameterToMultiMap("", "plot", plot));
            }
            if (r != null)
            {
                localVarRequestOptions.QueryParameters.Add(Applications.OMDb.Swagger.Client.ClientUtils.ParameterToMultiMap("", "r", r));
            }
            if (callback != null)
            {
                localVarRequestOptions.QueryParameters.Add(Applications.OMDb.Swagger.Client.ClientUtils.ParameterToMultiMap("", "callback", callback));
            }

            localVarRequestOptions.Operation = "IDParameterApi.GetId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIKeyQueryParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(Applications.OMDb.Swagger.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/?i", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns a single result based on the ID provided 
        /// </summary>
        /// <exception cref="Applications.OMDb.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="i">A valid IMDb ID (e.g. tt0000001)</param>
        /// <param name="plot">Return short or full plot (optional)</param>
        /// <param name="r">The response type to return (optional)</param>
        /// <param name="callback">JSONP callback name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetIdAsync(string i, string plot = default(string), string r = default(string), string callback = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await GetIdWithHttpInfoAsync(i, plot, r, callback, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Returns a single result based on the ID provided 
        /// </summary>
        /// <exception cref="Applications.OMDb.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="i">A valid IMDb ID (e.g. tt0000001)</param>
        /// <param name="plot">Return short or full plot (optional)</param>
        /// <param name="r">The response type to return (optional)</param>
        /// <param name="callback">JSONP callback name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Applications.OMDb.Swagger.Client.ApiResponse<Object>> GetIdWithHttpInfoAsync(string i, string plot = default(string), string r = default(string), string callback = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'i' is set
            if (i == null)
            {
                throw new Applications.OMDb.Swagger.Client.ApiException(400, "Missing required parameter 'i' when calling IDParameterApi->GetId");
            }


            Applications.OMDb.Swagger.Client.RequestOptions localVarRequestOptions = new Applications.OMDb.Swagger.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Applications.OMDb.Swagger.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Applications.OMDb.Swagger.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Applications.OMDb.Swagger.Client.ClientUtils.ParameterToMultiMap("", "i", i));
            if (plot != null)
            {
                localVarRequestOptions.QueryParameters.Add(Applications.OMDb.Swagger.Client.ClientUtils.ParameterToMultiMap("", "plot", plot));
            }
            if (r != null)
            {
                localVarRequestOptions.QueryParameters.Add(Applications.OMDb.Swagger.Client.ClientUtils.ParameterToMultiMap("", "r", r));
            }
            if (callback != null)
            {
                localVarRequestOptions.QueryParameters.Add(Applications.OMDb.Swagger.Client.ClientUtils.ParameterToMultiMap("", "callback", callback));
            }

            localVarRequestOptions.Operation = "IDParameterApi.GetId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (APIKeyQueryParam) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apikey")))
            {
                localVarRequestOptions.QueryParameters.Add(Applications.OMDb.Swagger.Client.ClientUtils.ParameterToMultiMap("", "apikey", this.Configuration.GetApiKeyWithPrefix("apikey")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/?i", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetId", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
